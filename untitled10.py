# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N7Fhw7rAmWofig8J8hmk2T9M9Hmu1QEe
"""

import pandas as pd
import pickle
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Load the data from the pickled file
file_path = '/content/drive/My Drive/synthetic_dataset/goal_set.p'
with open(file_path, 'rb') as file:
    consultation_data = pickle.load(file)

# Extract 'train' data
train_data = consultation_data['train']

# Lists to hold disease tags and symptoms
disease_tags = []
symptoms = []

# Extract disease tag and symptoms from each consultation in the 'train' data
for item in train_data:
    # Extract disease tag
    disease_tags.append(item['disease_tag'])

    # Extract symptoms
    explicit_symptoms = list(item['goal']['explicit_inform_slots'].keys())
    implicit_symptoms = list(item['goal']['implicit_inform_slots'].keys())
    all_symptoms = explicit_symptoms + implicit_symptoms
    symptoms.append(all_symptoms)

# Create a DataFrame
df = pd.DataFrame({
    'Disease Tag': disease_tags,
    'Symptoms': symptoms
})

# Display the DataFrame
print(df)

df

# Dictionary to hold symptoms and the diseases they appear in
symptom_disease_map = {}

# Iterate through each consultation in the 'train' data
for item in train_data:
    disease_tag = item['disease_tag']
    explicit_symptoms = list(item['goal']['explicit_inform_slots'].keys())
    implicit_symptoms = list(item['goal']['implicit_inform_slots'].keys())
    all_symptoms = explicit_symptoms + implicit_symptoms

    # Update the symptom-disease mapping
    for symptom in all_symptoms:
        if symptom not in symptom_disease_map:
            symptom_disease_map[symptom] = set()
        symptom_disease_map[symptom].add(disease_tag)

# List to hold repeating symptoms
repeating_symptoms = []

# Iterate through the symptom-disease mapping to find repeating symptoms
for symptom, diseases in symptom_disease_map.items():
    if len(diseases) > 1:
        repeating_symptoms.append((symptom, len(diseases)))

# Print the repeating symptoms along with the number of diseases they appear in
print("Repeating Symptoms and Number of Diseases:")
for idx, (symptom, num_diseases) in enumerate(repeating_symptoms, start=1):
    print(f"{idx}. {symptom}: {num_diseases} diseases")

# Dictionary to hold the number of symptoms for each disease
disease_symptom_count = {}

# Iterate through each consultation in the 'train' data
for item in train_data:
    disease_tag = item['disease_tag']
    explicit_symptoms = list(item['goal']['explicit_inform_slots'].keys())
    implicit_symptoms = list(item['goal']['implicit_inform_slots'].keys())
    all_symptoms = explicit_symptoms + implicit_symptoms

    # Update the symptom count for the disease
    if disease_tag not in disease_symptom_count:
        disease_symptom_count[disease_tag] = len(set(all_symptoms))
    else:
        disease_symptom_count[disease_tag] += len(set(all_symptoms))

# Print the number of symptoms for each disease
print("Number of Symptoms for Each Disease:")
for disease, symptom_count in disease_symptom_count.items():
    print(f"{disease}: {symptom_count}")

import pandas as pd

# Convert the dictionary to a DataFrame
df_symptom_count = pd.DataFrame.from_dict(disease_symptom_count, orient='index', columns=['Number of Symptoms'])

# Sort the DataFrame by the number of symptoms in descending order
df_symptom_count = df_symptom_count.sort_values(by='Number of Symptoms', ascending=False)

# Display the DataFrame
print("Number of Symptoms for Each Disease:")
print(df_symptom_count)

# Dictionary to hold the number of symptoms (both explicit and implicit) for each disease
disease_total_symptom_count = {}

# Iterate through each consultation in the 'train' data
for item in train_data:
    disease_tag = item['disease_tag']
    explicit_symptoms = list(item['goal']['explicit_inform_slots'].keys())
    implicit_symptoms = list(item['goal']['implicit_inform_slots'].keys())
    all_symptoms = explicit_symptoms + implicit_symptoms

    # Update the symptom count for the disease
    if disease_tag not in disease_total_symptom_count:
        disease_total_symptom_count[disease_tag] = len(set(all_symptoms))
    else:
        disease_total_symptom_count[disease_tag] += len(set(all_symptoms))

# Convert the dictionary to a DataFrame
df_total_symptom_count = pd.DataFrame.from_dict(disease_total_symptom_count, orient='index', columns=['Total Number of Symptoms'])

# Sort the DataFrame by the total number of symptoms in descending order
df_total_symptom_count = df_total_symptom_count.sort_values(by='Total Number of Symptoms', ascending=False)

# Display the DataFrame
print("Total Number of Symptoms (Explicit + Implicit) for Each Disease:")
print(df_total_symptom_count)

# Calculate the total number of diseases
total_diseases = len(associated_diseases)

# Assign probabilities to each repeating symptom based on the number of diseases they appear in
repeating_symptoms_with_prob = [(symptom, num_diseases, (num_diseases / total_diseases) * 100)
                                for symptom, num_diseases in repeating_symptoms]

# Sort the repeating symptoms based on their probabilities in descending order
repeating_symptoms_with_prob.sort(key=lambda x: x[2], reverse=True)

# Initialize a dictionary to hold the probability of each symptom
symptom_prob = {}

# Print the repeating symptoms along with their probabilities
print("Repeating Symptoms, Number of Diseases, and Probability (Sorted by Probability):")
for idx, (symptom, num_diseases, probability) in enumerate(repeating_symptoms_with_prob, start=1):
    symptom_prob[symptom] = probability  # Save the probability of the symptom
    print(f"{idx}. {symptom}: {num_diseases} diseases, Probability: {probability:.2f}%")

# Ask the user for input
user_input = input("Enter a word to match symptoms: ").strip().lower()

# List to hold matching symptoms
matching_symptoms = []

# Iterate through the symptom-disease mapping
for symptom in symptom_disease_map.keys():
    if user_input in symptom.lower():
        matching_symptoms.append(symptom)

# Print matching symptoms
if matching_symptoms:
    print(f"Symptoms matching '{user_input}':")
    for idx, symptom in enumerate(matching_symptoms, 1):
        print(f"{idx}. {symptom}")

    # Ask the user which symptom they have
    selection = input("Enter the number corresponding to the symptom you have: ")

    # Validate user selection
    if selection.isdigit() and 1 <= int(selection) <= len(matching_symptoms):
        user_input_symptom = matching_symptoms[int(selection) - 1]
        print(f"You selected: {user_input_symptom}")
    else:
        print("Invalid selection. Please enter a number corresponding to the symptom.")
else:
    print(f"No symptoms matching '{user_input}' found.")

# Check if user_input_symptom is defined
if 'user_input_symptom' in locals():
    # Find diseases associated with the selected symptom
    associated_diseases = symptom_disease_map.get(user_input_symptom, [])

    # Print associated diseases
    if associated_diseases:
        print(f"Diseases associated with '{user_input_symptom}':")
        for idx, disease in enumerate(associated_diseases, 1):
            print(f"{idx}. {disease}")

        # List to hold all symptoms of associated diseases
        all_associated_disease_symptoms = []

        # Iterate over each disease in associated_diseases
        for disease in associated_diseases:
            # Filter the DataFrame for the current disease
            disease_data = df[df['Disease Tag'] == disease]

            # Check if any data is found for the current disease
            if not disease_data.empty:
                # Extract symptoms from the filtered data
                disease_symptoms = disease_data['Symptoms'].iloc[0]

                # Add the symptoms to the list
                all_associated_disease_symptoms.extend(disease_symptoms)

        # Remove duplicates
        all_associated_disease_symptoms = list(set(all_associated_disease_symptoms))

        # Remove the user's chosen symptom from the list if it exists
        if user_input_symptom in all_associated_disease_symptoms:
            all_associated_disease_symptoms.remove(user_input_symptom)

        # Calculate the total number of associated diseases
        total_associated_diseases = len(associated_diseases)

        # Print all symptoms associated with the found diseases
        print("\nAll Symptoms Associated with the Found Diseases:")

        # Initialize dictionary to hold the count of each symptom
        symptom_count = {symptom: 0 for symptom in all_associated_disease_symptoms}

        # Count occurrences of each symptom across associated diseases
        for disease in associated_diseases:
            for symptom in symptom_disease_map.get(disease, []):
                if symptom in symptom_count:
                    symptom_count[symptom] += 1

        # Print the probability of each symptom using the symptom_prob dictionary
        # Sort symptoms by probability in ascending order
        sorted_symptoms = sorted(symptom_prob.items(), key=lambda x: x[1])

        for idx, (symptom, probability) in enumerate(sorted_symptoms, 1):
            if symptom in symptom_count:
                print(f"{idx}. {symptom}: {probability:.2f}%")
    else:
        print(f"No diseases associated with '{user_input_symptom}'.")
else:
    print("No symptom selected.")

# Define a variable to track whether diseases are found
diseases_found = False

# Initialize a set to hold encountered diseases
encountered_diseases = set()

# Initialize a set to hold all symptoms found in associated diseases
other_symptoms = set()

# Iterate over sorted symptoms in ascending order of probability
for symptom, probability in sorted_symptoms:
    # Check if the symptom has already been confirmed
    if symptom == user_input_symptom:
        continue

    response = input(f"Do you have {symptom}? (yes/no): ").lower().strip()
    if response == 'yes':
        # Combine the confirmed symptom with the user input symptom
        combined_symptoms = [user_input_symptom, symptom]

        # Find diseases associated with both symptoms
        combined_diseases = []
        for index, row in df.iterrows():
            disease_tag = row['Disease Tag']
            symptoms = row['Symptoms']
            if 'Wrist pain' in symptoms and 'Pain in eye' in symptoms:
                if disease_tag not in encountered_diseases:
                    combined_diseases.append(disease_tag)
                    encountered_diseases.add(disease_tag)
                # Add other symptoms of the disease to the set
                other_symptoms.update(symptoms)

        # Print diseases containing both symptoms
        if combined_diseases:
            print(f"Diseases containing both '{user_input_symptom}' and '{symptom}':")
            for idx, disease in enumerate(combined_diseases, 1):
                print(f"{idx}. {disease}")
            diseases_found = True
            break
        else:
            print(f"No diseases found containing both '{user_input_symptom}' and '{symptom}'.")
    elif response == 'no':
        continue
    else:
        print("Invalid response. Please enter 'yes' or 'no'.")

# If diseases are found, display other symptoms in associated diseases
if diseases_found:
    print("\nOther Symptoms in Associated Diseases:")
    for idx, symptom in enumerate(other_symptoms, 1):
        print(f"{idx}. {symptom}")