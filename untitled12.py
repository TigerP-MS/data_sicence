# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NcVLr16PjW4qaTouNvxUfzgEnnJrvKtG
"""

(consultation_data)

##Using train_data
import pandas as pd
import pickle
import numpy as np
from google.colab import drive
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder, LabelBinarizer

# Mount Google Drive
drive.mount('/content/drive', force_remount=True)

# Load the data from the pickled file
file_path = '/content/drive/My Drive/synthetic_dataset/goal_set.p'
with open(file_path, 'rb') as file:
    consultation_data = pickle.load(file)

train_data = consultation_data['train']

# Extract explicit and implicit symptoms along with their disease tags
disease_tags = []
explicit_symptoms_list = []
implicit_symptoms_list = []

for item in train_data:
    disease_tags.append(item['disease_tag'])
    explicit_symptoms = list(item['goal']['explicit_inform_slots'].keys())
    implicit_symptoms = list(item['goal']['implicit_inform_slots'].keys())
    explicit_symptoms_list.append(", ".join(explicit_symptoms))
    implicit_symptoms_list.append(", ".join(implicit_symptoms))

# Create DataFrame
df = pd.DataFrame({
    'Disease Tag': disease_tags,
    'Explicit Symptoms': explicit_symptoms_list,
    'Implicit Symptoms': implicit_symptoms_list
})

# Display the DataFrame
print(df.head(10))

# Define and train the Random Forest model
X = df['Explicit Symptoms'] + " " + df['Implicit Symptoms']
y = df['Disease Tag']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize text data
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

# Train Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Random Forest Accuracy: {accuracy:.2f}")

# Define NDCG calculation functions
def dcg_score(y_true, y_score, k=10):
    order = np.argsort(y_score)[::-1]
    y_true = np.take(y_true, order[:k])

    gain = 2 ** y_true - 1
    discounts = np.log2(np.arange(len(y_true)) + 2)
    return np.sum(gain / discounts)

def ndcg_score(y_true, y_score, k=10):
    best = dcg_score(y_true, y_true, k)
    actual = dcg_score(y_true, y_score, k)
    return actual / best

# Calculate NDCG for the model
y_test_bin = LabelBinarizer().fit_transform(y_test)
y_score = model.predict_proba(X_test)

ndcg_scores = [ndcg_score(y_test_bin[i], y_score[i], k=10) for i in range(len(y_test))]
mean_ndcg = np.mean(ndcg_scores)
print(f"Random Forest NDCG@10: {mean_ndcg:.5f}")

# Symptom matching and disease prediction logic
user_input = input("Enter explicit symptoms (comma-separated): ").strip().lower()
input_symptoms = [symptom.strip() for symptom in user_input.split(',')]
matching_symptoms = set()

for item in train_data:
    explicit_info = item.get('goal', {}).get('explicit_inform_slots', {})
    implicit_info = item.get('goal', {}).get('implicit_inform_slots', {})
    if any(symptom.lower() in [key.lower() for key in explicit_info] for symptom in input_symptoms):
        matching_symptoms.update(implicit_info.keys())

# Print the top 10 implicit symptoms with numbering from 1 to 10
if matching_symptoms:
    print("Implicit Symptoms:")
    for idx, symptom in enumerate(list(matching_symptoms)[:10], start=1):
        print(f"{idx}. {symptom}")
else:
    print("No matching symptoms found.")

##using test_data
import pandas as pd
import pickle
import numpy as np
from google.colab import drive
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder, LabelBinarizer

# Mount Google Drive
drive.mount('/content/drive', force_remount=True)

# Load the data from the pickled file
file_path = '/content/drive/My Drive/synthetic_dataset/goal_set.p'
with open(file_path, 'rb') as file:
    consultation_data = pickle.load(file)

test_data = consultation_data['test']

# Extract explicit and implicit symptoms along with their disease tags
disease_tags = []
explicit_symptoms_list = []
implicit_symptoms_list = []

for item in test_data:
    disease_tags.append(item['disease_tag'])
    explicit_symptoms = list(item['goal']['explicit_inform_slots'].keys())
    implicit_symptoms = list(item['goal']['implicit_inform_slots'].keys())
    explicit_symptoms_list.append(", ".join(explicit_symptoms))
    implicit_symptoms_list.append(", ".join(implicit_symptoms))

# Create DataFrame
df = pd.DataFrame({
    'Disease Tag': disease_tags,
    'Explicit Symptoms': explicit_symptoms_list,
    'Implicit Symptoms': implicit_symptoms_list
})

# Display the DataFrame
print(df.head(100))

# Define and train the Random Forest model
X = df['Explicit Symptoms'] + " " + df['Implicit Symptoms']
y = df['Disease Tag']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize text data
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

# Train Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Random Forest Accuracy: {accuracy:.2f}")

# Define NDCG calculation functions
def dcg_score(y_true, y_score, k=10):
    order = np.argsort(y_score)[::-1]
    y_true = np.take(y_true, order[:k])

    gain = 2 ** y_true - 1
    discounts = np.log2(np.arange(len(y_true)) + 2)
    return np.sum(gain / discounts)

def ndcg_score(y_true, y_score, k=10):
    best = dcg_score(y_true, y_true, k)
    actual = dcg_score(y_true, y_score, k)
    return actual / best

# Calculate NDCG for the model
y_test_bin = LabelBinarizer().fit_transform(y_test)
y_score = model.predict_proba(X_test)

ndcg_scores = [ndcg_score(y_test_bin[i], y_score[i], k=10) for i in range(len(y_test))]
mean_ndcg = np.mean(ndcg_scores)
print(f"Random Forest NDCG@10: {mean_ndcg:.5f}")

# Symptom matching and disease prediction logic using test data
user_input = input("Enter explicit symptoms (comma-separated): ").strip().lower()
input_symptoms = [symptom.strip() for symptom in user_input.split(',')]
matching_symptoms = set()

for item in test_data:
    explicit_info = item.get('goal', {}).get('explicit_inform_slots', {})
    implicit_info = item.get('goal', {}).get('implicit_inform_slots', {})
    if any(symptom.lower() in [key.lower() for key in explicit_info] for symptom in input_symptoms):
        matching_symptoms.update(implicit_info.keys())

# Print the top 10 implicit symptoms with numbering from 1 to 10
if matching_symptoms:
    print("Implicit Symptoms:")
    for idx, symptom in enumerate(list(matching_symptoms)[:10], start=1):
        print(f"{idx}. {symptom}")
else:
    print("No matching symptoms found.")

